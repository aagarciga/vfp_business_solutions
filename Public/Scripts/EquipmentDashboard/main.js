// Generated by CoffeeScript 1.9.3
(function() {
  var $, App, DynamicFilter, EquipmentDashboard, dandelion, global;

  global = window;

  $ = global.jQuery;

  App = global.App;

  dandelion = global.dandelion;

  EquipmentDashboard = dandelion.namespace('App.EquipmentDashboard', global);

  DynamicFilter = App.EquipmentDashboard.DynamicFilter;

  EquipmentDashboard.status = {};

  EquipmentDashboard.status.itemsPerPage = 50;

  EquipmentDashboard.status.table_header_sortLastButton = null;

  EquipmentDashboard.status.table_header_sortField = 'ordnum';

  EquipmentDashboard.status.table_header_sortFieldOrder = 'ASC';

  EquipmentDashboard.status.currentPage = 1;

  EquipmentDashboard.status.currentItemNo = '';

  EquipmentDashboard.status.currentSet = 'details';

  EquipmentDashboard.status.currentBalance = "0.0";

  EquipmentDashboard.dictionaries = {};

  EquipmentDashboard.htmlBindings = {};

  EquipmentDashboard.htmlBindings.container = '.container';

  EquipmentDashboard.htmlBindings.itemCounter = '#panelHeadingItemsCount';

  EquipmentDashboard.htmlBindings.drpItemPerPage = '.top-pager-itemmperpage-control a';

  EquipmentDashboard.htmlBindings.drpItemPerPageValue = '.top-pager-itemmperpage-control button span.value';

  EquipmentDashboard.htmlBindings.filterForm = '#filterForm';

  EquipmentDashboard.htmlBindings.table = '#EquipmentDashboardTable';

  EquipmentDashboard.htmlBindings.table_header_btnSort = '.btn-table-sort';

  EquipmentDashboard.htmlBindings.table_body_btnCommitted = '.btn-committed-form-link';

  EquipmentDashboard.htmlBindings.table_body_btnOnorder = '.btn-onorder-form-link';

  EquipmentDashboard.htmlBindings.pager_container = '.pager-wrapper';

  EquipmentDashboard.htmlBindings.pager_btnPagerPages = '.pager-btn';

  EquipmentDashboard.functions = {};

  EquipmentDashboard.functions.paginate = function() {
    $.ajax({
      data: {
        predicate: EquipmentDashboard.DynamicFilter.functions.getPredicate(),
        page: EquipmentDashboard.status.currentPage,
        itemsPerPage: EquipmentDashboard.status.itemsPerPage,
        orderby: EquipmentDashboard.status.table_header_sortField,
        order: EquipmentDashboard.status.table_header_sortFieldOrder
      },
      url: EquipmentDashboard.urls.getPage,
      type: 'post',
      beforeSend: function() {
        return $('.loading').show();
      },
      success: function(response, textStatus, jqXHR) {
        var data, pager, pagerControl, pagerItems;
        data = $.parseJSON(response);
        pager = new BootstrapPager(data, EquipmentDashboard.eventHandlers.pager_btnPagerPages_onClick);
        pagerItems = pager.getCurrentPagedItems();
        pagerControl = pager.getPagerControl();
        $(EquipmentDashboard.htmlBindings.pager_container).empty().append(pagerControl);
        EquipmentDashboard.functions.updateTable(pagerItems);
        $(EquipmentDashboard.htmlBindings.itemCounter).html(pager.itemsCount);
        return $('.loading').hide();
      }
    });
    return this;
  };

  EquipmentDashboard.functions.updateTable = function(items) {
    var $table, $tableBody, index;
    $table = $(EquipmentDashboard.htmlBindings.table);
    $tableBody = $table.children('tbody');
    $tableBody.empty();
    for (index in items) {
      if (items.hasOwnProperty(index)) {
        $tableBody.append(EquipmentDashboard.functions.buildTableItem(items[index], '', "item-field"));
      }
    }
    EquipmentDashboard.functions.bindTableItemsEventHandlers();
    return this;
  };

  EquipmentDashboard.functions.buildTableItem = function(dataRow, trClass, tdClass) {
    var doc, result, selectBuilder, simpleTdBuilder, tdDateRecBuilder, tdEquipIdBuilder, tdExpdteinBuilder, tdInstallDteBuilder, tdItemNoBuilder, tdMakeBuilder, tdModelBuilder, tdNotesBuilder, tdOrdNumBuilder, tdOrderBuilder, tdPictureBuilder, tdSerialNoBuilder, tdStatusBuilder, tdToolboxIdBuilder, withLinkTdBuilder, withSelectBuilder;
    doc = global.document;
    result = doc.createElement('tr');
    simpleTdBuilder = function(data, tdClass) {
      var td;
      td = doc.createElement('td');
      td.className = tdClass;
      td.appendChild(doc.createTextNode(data));
      return td;
    };
    withLinkTdBuilder = function(data, linkClassName, tdLinkClass, href) {
      var a, td;
      if (href == null) {
        href = '#';
      }
      td = doc.createElement('td');
      a = doc.createElement('a');
      a.href = href;
      a.className = linkClassName;
      a.dataset.custno = dataRow.custno;
      if (typeof data === "string") {
        a.appendChild(doc.createTextNode(data));
      } else {
        a.appendChild(data);
      }
      td.className = tdLinkClass || tdClass;
      td.appendChild(a);
      return td;
    };
    selectBuilder = function(current, values) {
      var currentId, currentValue, index, option, select;
      select = doc.createElement('select');
      option = doc.createElement('option');
      option.appendChild(doc.createTextNode("Empty"));
      select.appendChild(option);
      for (index in values) {
        if (values.hasOwnProperty(index)) {
          currentId = values[index].id;
          currentValue = values[index].descrip;
          option = doc.createElement('option');
          if (current === currentId) {
            option.selected = "selected";
          }
          option.value = currentId;
          option.appendChild(doc.createTextNode(currentValue));
          select.appendChild(option);
        }
      }
      select.className = 'form-control update-dropdown';
      return select;
    };
    withSelectBuilder = function(data, dictionary, dropdownClassName) {
      var select, td;
      td = doc.createElement('td');
      select = selectBuilder(data, dictionary);
      select.dataset.ordnum = dataRow.ordnum;
      select.className += ' select2-nosearch ' + dropdownClassName;
      td.appendChild(select);
      return td;
    };
    tdOrdNumBuilder = function() {
      return simpleTdBuilder(dataRow.ordnum);
    };
    tdEquipIdBuilder = function() {
      return simpleTdBuilder(dataRow.equipid);
    };
    tdItemNoBuilder = function() {
      return simpleTdBuilder(dataRow.itemno);
    };
    tdModelBuilder = function() {
      return simpleTdBuilder(dataRow.model);
    };
    tdSerialNoBuilder = function() {
      return simpleTdBuilder(dataRow.serialno);
    };
    tdMakeBuilder = function() {
      return simpleTdBuilder(dataRow.make);
    };
    tdInstallDteBuilder = function() {
      return simpleTdBuilder(dataRow.installdte);
    };
    tdExpdteinBuilder = function() {
      return simpleTdBuilder(dataRow.expdtein);
    };
    tdDateRecBuilder = function() {
      return simpleTdBuilder(dataRow.daterec);
    };
    tdOrderBuilder = function() {
      return simpleTdBuilder(dataRow.order);
    };
    tdStatusBuilder = function() {
      return simpleTdBuilder(dataRow.status);
    };
    tdToolboxIdBuilder = function() {
      return simpleTdBuilder(dataRow.toolboxid);
    };
    tdNotesBuilder = function() {
      return simpleTdBuilder(dataRow.notes);
    };
    tdPictureBuilder = function() {
      return simpleTdBuilder(dataRow.picture_fi);
    };
    result.className = trClass;
    result.appendChild(tdOrdNumBuilder());
    result.appendChild(tdEquipIdBuilder());
    result.appendChild(tdItemNoBuilder());
    result.appendChild(tdModelBuilder());
    result.appendChild(tdSerialNoBuilder());
    result.appendChild(tdMakeBuilder());
    result.appendChild(tdInstallDteBuilder());
    result.appendChild(tdExpdteinBuilder());
    result.appendChild(tdDateRecBuilder());
    result.appendChild(tdOrderBuilder());
    result.appendChild(tdStatusBuilder());
    result.appendChild(tdToolboxIdBuilder());
    result.appendChild(tdNotesBuilder());
    result.appendChild(tdPictureBuilder());
    return result;
  };

  EquipmentDashboard.functions.bindTableItemsEventHandlers = function() {
    return this;
  };

  EquipmentDashboard.functions.bindEventHandlers = function() {
    $(EquipmentDashboard.htmlBindings.drpItemPerPage).on('click', EquipmentDashboard.eventHandlers.drpItemPerPage_onClick);
    $(EquipmentDashboard.htmlBindings.table_header_btnSort).on('click', EquipmentDashboard.eventHandlers.table_body_btnSort_onClick);
    $(EquipmentDashboard.htmlBindings.pager_btnPagerPages).on('click', EquipmentDashboard.eventHandlers.pager_btnPagerPages_onClick);
    EquipmentDashboard.functions.bindTableItemsEventHandlers();
    return this;
  };

  EquipmentDashboard.eventHandlers = {};

  EquipmentDashboard.eventHandlers.drpItemPerPage_onClick = function(event) {
    var $target, value;
    $target = $(event.target);
    value = $target.html();
    EquipmentDashboard.status.itemsPerPage = value;
    $(EquipmentDashboard.htmlBindings.drpItemPerPageValue).text(value);
    EquipmentDashboard.status.currentPage = 1;
    EquipmentDashboard.functions.paginate();
    return this;
  };

  EquipmentDashboard.eventHandlers.pager_btnPagerPages_onClick = function(event) {
    var $target, value;
    $target = $(event.target);
    value = $target.data('page');
    EquipmentDashboard.status.currentPage = value;
    EquipmentDashboard.functions.paginate();
    return this;
  };

  EquipmentDashboard.eventHandlers.table_body_btnSort_onClick = function(event) {
    var $target, sortingField;
    $target = $(event.target);
    sortingField = $target.data('field');
    if (EquipmentDashboard.status.table_header_sortLastButton !== null) {
      EquipmentDashboard.status.table_header_sortLastButton.removeClass('asc desc');
    }
    if (EquipmentDashboard.status.table_header_sortField !== sortingField) {
      EquipmentDashboard.status.table_header_sortFieldOrder = '';
    }
    EquipmentDashboard.status.table_header_sortField = sortingField;
    if (EquipmentDashboard.status.table_header_sortFieldOrder === 'ASC') {
      EquipmentDashboard.status.table_header_sortFieldOrder = 'DESC';
      $target.addClass('asc').removeClass('desc');
    } else {
      EquipmentDashboard.status.table_header_sortFieldOrder = 'ASC';
      $target.addClass('desc').removeClass('asc');
    }
    EquipmentDashboard.status.table_header_sortLastButton = $target;
    EquipmentDashboard.functions.paginate();
    return this;
  };

  EquipmentDashboard.init = function(defaultUserFilter) {
    EquipmentDashboard.status.itemsPerPage = $(EquipmentDashboard.htmlBindings.drpItemPerPageValue).text();
    DynamicFilter.init(defaultUserFilter);
    EquipmentDashboard.functions.bindEventHandlers();
    return this;
  };

}).call(this);
