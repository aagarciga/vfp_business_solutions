// Generated by CoffeeScript 1.9.3
(function() {
  var $, App, DynamicFilter, OnPurchaseOrderDashboard, dandelion, global;

  global = window;

  $ = global.jQuery;

  App = global.App;

  dandelion = global.dandelion;

  OnPurchaseOrderDashboard = dandelion.namespace('App.OnPurchaseOrderDashboard', global);

  DynamicFilter = App.OnPurchaseOrderDashboard.DynamicFilter;

  OnPurchaseOrderDashboard.status = {};

  OnPurchaseOrderDashboard.status.itemsPerPage = 50;

  OnPurchaseOrderDashboard.status.table_header_sortLastButton = null;

  OnPurchaseOrderDashboard.status.table_header_sortField = 'pono';

  OnPurchaseOrderDashboard.status.table_header_sortFieldOrder = 'ASC';

  OnPurchaseOrderDashboard.status.currentPage = 1;

  OnPurchaseOrderDashboard.status.currentItemNo = '';

  OnPurchaseOrderDashboard.status.currentSet = 'details';

  OnPurchaseOrderDashboard.status.currentBalance = "0.0";

  OnPurchaseOrderDashboard.dictionaries = {};

  OnPurchaseOrderDashboard.htmlBindings = {};

  OnPurchaseOrderDashboard.htmlBindings.container = '.container';

  OnPurchaseOrderDashboard.htmlBindings.itemCounter = '#panelHeadingItemsCount';

  OnPurchaseOrderDashboard.htmlBindings.drpItemPerPage = '.top-pager-itemmperpage-control a';

  OnPurchaseOrderDashboard.htmlBindings.drpItemPerPageValue = '.top-pager-itemmperpage-control button span.value';

  OnPurchaseOrderDashboard.htmlBindings.filterForm = '#filterForm';

  OnPurchaseOrderDashboard.htmlBindings.table = '#OnPurchaseOrderDashboardTable';

  OnPurchaseOrderDashboard.htmlBindings.table_header_btnSort = '.btn-table-sort';

  OnPurchaseOrderDashboard.htmlBindings.table_body_btnCommitted = '.btn-committed-form-link';

  OnPurchaseOrderDashboard.htmlBindings.table_body_btnOnorder = '.btn-onorder-form-link';

  OnPurchaseOrderDashboard.htmlBindings.pager_container = '.pager-wrapper';

  OnPurchaseOrderDashboard.htmlBindings.pager_btnPagerPages = '.pager-btn';

  OnPurchaseOrderDashboard.functions = {};

  OnPurchaseOrderDashboard.functions.paginate = function() {
    $.ajax({
      data: {
        onorder: OnPurchaseOrderDashboard.status.currentOnOrder,
        predicate: OnPurchaseOrderDashboard.DynamicFilter.functions.getPredicate(),
        page: OnPurchaseOrderDashboard.status.currentPage,
        itemsPerPage: OnPurchaseOrderDashboard.status.itemsPerPage,
        orderby: OnPurchaseOrderDashboard.status.table_header_sortField,
        order: OnPurchaseOrderDashboard.status.table_header_sortFieldOrder
      },
      url: OnPurchaseOrderDashboard.urls.getPage,
      type: 'post',
      beforeSend: function() {
        return $('.loading').show();
      },
      success: function(response, textStatus, jqXHR) {
        var data, pager, pagerControl, pagerItems;
        data = $.parseJSON(response);
        pager = new BootstrapPager(data, OnPurchaseOrderDashboard.eventHandlers.pager_btnPagerPages_onClick);
        pagerItems = pager.getCurrentPagedItems();
        pagerControl = pager.getPagerControl();
        $(OnPurchaseOrderDashboard.htmlBindings.pager_container).empty().append(pagerControl);
        OnPurchaseOrderDashboard.functions.updateTable(pagerItems);
        $(OnPurchaseOrderDashboard.htmlBindings.itemCounter).html(pager.itemsCount);
        return $('.loading').hide();
      }
    });
    return this;
  };

  OnPurchaseOrderDashboard.functions.updateTable = function(items) {
    var $table, $tableBody, index;
    $table = $(OnPurchaseOrderDashboard.htmlBindings.table);
    $tableBody = $table.children('tbody');
    $tableBody.empty();
    for (index in items) {
      if (items.hasOwnProperty(index)) {
        $tableBody.append(OnPurchaseOrderDashboard.functions.buildTableItem(items[index], '', "item-field"));
      }
    }
    OnPurchaseOrderDashboard.functions.bindTableItemsEventHandlers();
    return this;
  };

  OnPurchaseOrderDashboard.functions.buildTableItem = function(dataRow, trClass, tdClass) {
    var doc, result, selectBuilder, simpleTdBuilder, tdPoDateBuilder, tdPoNoBuilder, tdPoTypeBuilder, tdQtyLeftBuilder, tdQtyOrdBuilder, tdQtyRecBuilder, tdQtyShpBuilder, tdShippedBuilder, tdVendNoBuilder, withLinkTdBuilder, withSelectBuilder;
    doc = global.document;
    result = doc.createElement('tr');
    simpleTdBuilder = function(data, tdClass) {
      var td;
      td = doc.createElement('td');
      td.className = tdClass;
      td.appendChild(doc.createTextNode(data));
      return td;
    };
    withLinkTdBuilder = function(data, linkClassName, tdLinkClass, href) {
      var a, td;
      if (href == null) {
        href = '#';
      }
      td = doc.createElement('td');
      a = doc.createElement('a');
      a.href = href;
      a.className = linkClassName;
      a.dataset.custno = dataRow.custno;
      if (typeof data === "string") {
        a.appendChild(doc.createTextNode(data));
      } else {
        a.appendChild(data);
      }
      td.className = tdLinkClass || tdClass;
      td.appendChild(a);
      return td;
    };
    selectBuilder = function(current, values) {
      var currentId, currentValue, index, option, select;
      select = doc.createElement('select');
      option = doc.createElement('option');
      option.appendChild(doc.createTextNode("Empty"));
      select.appendChild(option);
      for (index in values) {
        if (values.hasOwnProperty(index)) {
          currentId = values[index].id;
          currentValue = values[index].descrip;
          option = doc.createElement('option');
          if (current === currentId) {
            option.selected = "selected";
          }
          option.value = currentId;
          option.appendChild(doc.createTextNode(currentValue));
          select.appendChild(option);
        }
      }
      select.className = 'form-control update-dropdown';
      return select;
    };
    withSelectBuilder = function(data, dictionary, dropdownClassName) {
      var select, td;
      td = doc.createElement('td');
      select = selectBuilder(data, dictionary);
      select.dataset.ordnum = dataRow.ordnum;
      select.className += ' select2-nosearch ' + dropdownClassName;
      td.appendChild(select);
      return td;
    };
    tdPoNoBuilder = function() {
      return simpleTdBuilder(dataRow.pono);
    };
    tdVendNoBuilder = function() {
      return simpleTdBuilder(dataRow.vendno);
    };
    tdPoDateBuilder = function() {
      return simpleTdBuilder(dataRow.podate);
    };
    tdQtyOrdBuilder = function() {
      return simpleTdBuilder(dataRow.qtyord, 'number');
    };
    tdQtyRecBuilder = function() {
      return simpleTdBuilder(dataRow.qtyrec, 'number');
    };
    tdQtyLeftBuilder = function() {
      return simpleTdBuilder(dataRow.qtyleft, 'number');
    };
    tdQtyShpBuilder = function() {
      return simpleTdBuilder(dataRow.qtyshp, 'number');
    };
    tdShippedBuilder = function() {
      return simpleTdBuilder(dataRow.shipped, 'date');
    };
    tdPoTypeBuilder = function() {
      return simpleTdBuilder(dataRow.potype, 'number');
    };
    result.className = trClass;
    result.appendChild(tdPoNoBuilder());
    result.appendChild(tdVendNoBuilder());
    result.appendChild(tdPoDateBuilder());
    result.appendChild(tdQtyOrdBuilder());
    result.appendChild(tdQtyRecBuilder());
    result.appendChild(tdQtyLeftBuilder());
    result.appendChild(tdQtyShpBuilder());
    result.appendChild(tdShippedBuilder());
    result.appendChild(tdPoTypeBuilder());
    return result;
  };

  OnPurchaseOrderDashboard.functions.bindTableItemsEventHandlers = function() {
    return this;
  };

  OnPurchaseOrderDashboard.functions.bindEventHandlers = function() {
    $(OnPurchaseOrderDashboard.htmlBindings.drpItemPerPage).on('click', OnPurchaseOrderDashboard.eventHandlers.drpItemPerPage_onClick);
    $(OnPurchaseOrderDashboard.htmlBindings.table_header_btnSort).on('click', OnPurchaseOrderDashboard.eventHandlers.table_body_btnSort_onClick);
    $(OnPurchaseOrderDashboard.htmlBindings.pager_btnPagerPages).on('click', OnPurchaseOrderDashboard.eventHandlers.pager_btnPagerPages_onClick);
    OnPurchaseOrderDashboard.functions.bindTableItemsEventHandlers();
    return this;
  };

  OnPurchaseOrderDashboard.eventHandlers = {};

  OnPurchaseOrderDashboard.eventHandlers.drpItemPerPage_onClick = function(event) {
    var $target, value;
    $target = $(event.target);
    value = $target.html();
    OnPurchaseOrderDashboard.status.itemsPerPage = value;
    $(OnPurchaseOrderDashboard.htmlBindings.drpItemPerPageValue).text(value);
    OnPurchaseOrderDashboard.status.currentPage = 1;
    OnPurchaseOrderDashboard.functions.paginate();
    return this;
  };

  OnPurchaseOrderDashboard.eventHandlers.pager_btnPagerPages_onClick = function(event) {
    var $target, value;
    $target = $(event.target);
    value = $target.data('page');
    OnPurchaseOrderDashboard.status.currentPage = value;
    OnPurchaseOrderDashboard.functions.paginate();
    return this;
  };

  OnPurchaseOrderDashboard.eventHandlers.table_body_btnSort_onClick = function(event) {
    var $target, sortingField;
    $target = $(event.target);
    sortingField = $target.data('field');
    if (OnPurchaseOrderDashboard.status.table_header_sortLastButton !== null) {
      OnPurchaseOrderDashboard.status.table_header_sortLastButton.removeClass('asc desc');
    }
    if (OnPurchaseOrderDashboard.status.table_header_sortField !== sortingField) {
      OnPurchaseOrderDashboard.status.table_header_sortFieldOrder = '';
    }
    OnPurchaseOrderDashboard.status.table_header_sortField = sortingField;
    if (OnPurchaseOrderDashboard.status.table_header_sortFieldOrder === 'ASC') {
      OnPurchaseOrderDashboard.status.table_header_sortFieldOrder = 'DESC';
      $target.addClass('asc').removeClass('desc');
    } else {
      OnPurchaseOrderDashboard.status.table_header_sortFieldOrder = 'ASC';
      $target.addClass('desc').removeClass('asc');
    }
    OnPurchaseOrderDashboard.status.table_header_sortLastButton = $target;
    OnPurchaseOrderDashboard.functions.paginate();
    return this;
  };

  OnPurchaseOrderDashboard.init = function(onorder, defaultUserFilter) {
    OnPurchaseOrderDashboard.status.currentOnOrder = onorder;
    OnPurchaseOrderDashboard.status.itemsPerPage = $(OnPurchaseOrderDashboard.htmlBindings.drpItemPerPageValue).text();
    DynamicFilter.init(defaultUserFilter);
    OnPurchaseOrderDashboard.functions.bindEventHandlers();
    return this;
  };

}).call(this);
