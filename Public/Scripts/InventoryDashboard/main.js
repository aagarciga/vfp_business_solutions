// Generated by CoffeeScript 1.10.0
(function() {
  var $, App, DynamicFilter, InventoryDashboard, ProjectFiles, dandelion, global;

  global = window;

  $ = global.jQuery;

  App = global.App;

  dandelion = global.dandelion;

  InventoryDashboard = dandelion.namespace('App.InventoryDashboard', global);

  DynamicFilter = App.InventoryDashboard.DynamicFilter;

  ProjectFiles = App.InventoryDashboard.ProjectFiles;

  InventoryDashboard.status = {};

  InventoryDashboard.status.itemsPerPage = 50;

  InventoryDashboard.status.table_header_sortLastButton = null;

  InventoryDashboard.status.table_header_sortField = 'itemno';

  InventoryDashboard.status.table_header_sortFieldOrder = 'ASC';

  InventoryDashboard.status.currentPage = 1;

  InventoryDashboard.status.currentItemno = '';

  InventoryDashboard.status.currentSet = 'details';

  InventoryDashboard.status.currentBalance = "0.0";

  InventoryDashboard.dictionaries = {};

  InventoryDashboard.htmlBindings = {};

  InventoryDashboard.htmlBindings.container = '.container';

  InventoryDashboard.htmlBindings.itemCounter = '#panelHeadingItemsCount';

  InventoryDashboard.htmlBindings.drpItemPerPage = '.top-pager-itemmperpage-control a';

  InventoryDashboard.htmlBindings.drpItemPerPageValue = '.top-pager-itemmperpage-control button span.value';

  InventoryDashboard.htmlBindings.filterForm = '#filterForm';

  InventoryDashboard.htmlBindings.table = '#inventoryDashboardTable';

  InventoryDashboard.htmlBindings.table_header_btnSort = '.btn-table-sort';

  InventoryDashboard.htmlBindings.table_body_btnCommitted = '.btn-committed-form-link';

  InventoryDashboard.htmlBindings.table_body_btnOnorder = '.btn-onorder-form-link';

  InventoryDashboard.htmlBindings.table_body_btnAttach = '.btn-files-dialog';

  InventoryDashboard.htmlBindings.pager_container = '.pager-wrapper';

  InventoryDashboard.htmlBindings.pager_btnPagerPages = '.pager-btn';

  InventoryDashboard.functions = {};

  InventoryDashboard.functions.paginate = function() {
    $.ajax({
      data: {
        predicate: InventoryDashboard.DynamicFilter.functions.getPredicate(),
        page: InventoryDashboard.status.currentPage,
        itemsPerPage: InventoryDashboard.status.itemsPerPage,
        orderby: InventoryDashboard.status.table_header_sortField,
        order: InventoryDashboard.status.table_header_sortFieldOrder
      },
      url: InventoryDashboard.urls.getPage,
      type: 'post',
      beforeSend: function() {
        return $('.loading').show();
      },
      success: function(response, textStatus, jqXHR) {
        var data, pager, pagerControl, pagerItems;
        data = $.parseJSON(response);
        pager = new BootstrapPager(data, InventoryDashboard.eventHandlers.pager_btnPagerPages_onClick);
        pagerItems = pager.getCurrentPagedItems();
        pagerControl = pager.getPagerControl();
        $(InventoryDashboard.htmlBindings.pager_container).empty().append(pagerControl);
        InventoryDashboard.functions.updateTable(pagerItems);
        $(InventoryDashboard.htmlBindings.itemCounter).html(pager.itemsCount);
        return $('.loading').hide();
      }
    });
    return this;
  };

  InventoryDashboard.functions.updateTable = function(items) {
    var $table, $tableBody, index;
    $table = $(InventoryDashboard.htmlBindings.table);
    $tableBody = $table.children('tbody');
    $tableBody.empty();
    for (index in items) {
      if (items.hasOwnProperty(index)) {
        $tableBody.append(InventoryDashboard.functions.buildTableItem(items[index], '', "item-field"));
      }
    }
    InventoryDashboard.functions.bindTableItemsEventHandlers();
    return this;
  };

  InventoryDashboard.functions.buildTableItem = function(dataRow, trClass, tdClass) {
    var doc, result, tdAttachedFilesBuilder, tdCommittedBuilder, tdDescripBuilder, tdItemNoBuilder, tdItmwhsBuilder, tdOnhandBuilder, tdOnorderBuilder;
    doc = global.document;
    result = doc.createElement('tr');
    tdItemNoBuilder = function() {
      return App.Helpers.simpleTdBuilder(dataRow.itemno, '');
    };
    tdItmwhsBuilder = function() {
      return App.Helpers.simpleTdBuilder(dataRow.itmwhs, '');
    };
    tdDescripBuilder = function() {
      return App.Helpers.simpleTdBuilder(dataRow.descrip, '');
    };
    tdOnhandBuilder = function() {
      return App.Helpers.simpleTdBuilder(dataRow.onhand, 'number');
    };
    tdOnorderBuilder = function() {
      return App.Helpers.withLinkTdBuilder(dataRow.onorder, 'number', InventoryDashboard.htmlBindings.table_body_btnOnorder.slice(1), dataRow.onorderHref, {});
    };
    tdCommittedBuilder = function() {
      return App.Helpers.withLinkTdBuilder(dataRow.committed, 'number', InventoryDashboard.htmlBindings.table_body_btnCommitted.slice(1), dataRow.committedHref, {});
    };
    tdAttachedFilesBuilder = function() {
      var spanGlyphIcon;
      spanGlyphIcon = doc.createElement('span');
      spanGlyphIcon.className = 'glyphicon glyphicon-folder-close';
      return App.Helpers.withLinkTdBuilder(spanGlyphIcon, 'item-action item-files', InventoryDashboard.htmlBindings.table_body_btnAttach.slice(1), "#", {
        itemno: dataRow.itemno
      });
    };
    result.className = trClass;
    result.appendChild(tdItemNoBuilder());
    result.appendChild(tdItmwhsBuilder());
    result.appendChild(tdDescripBuilder());
    result.appendChild(tdOnhandBuilder());
    result.appendChild(tdOnorderBuilder());
    result.appendChild(tdCommittedBuilder());
    result.appendChild(tdAttachedFilesBuilder());
    return result;
  };

  InventoryDashboard.functions.bindTableItemsEventHandlers = function() {
    $(InventoryDashboard.htmlBindings.table_body_btnAttach).on('click', InventoryDashboard.eventHandlers.table_body_btnAttach_onClick);
    return this;
  };

  InventoryDashboard.functions.bindEventHandlers = function() {
    $(InventoryDashboard.htmlBindings.drpItemPerPage).on('click', InventoryDashboard.eventHandlers.drpItemPerPage_onClick);
    $(InventoryDashboard.htmlBindings.table_header_btnSort).on('click', InventoryDashboard.eventHandlers.table_body_btnSort_onClick);
    $(InventoryDashboard.htmlBindings.pager_btnPagerPages).on('click', InventoryDashboard.eventHandlers.pager_btnPagerPages_onClick);
    $(InventoryDashboard.htmlBindings.table_body_btnAttach).on('click', InventoryDashboard.eventHandlers.table_body_btnAttach_onClick);
    InventoryDashboard.functions.bindTableItemsEventHandlers();
    return this;
  };

  InventoryDashboard.eventHandlers = {};

  InventoryDashboard.eventHandlers.drpItemPerPage_onClick = function(event) {
    var $target, value;
    $target = $(event.target);
    value = $target.html();
    InventoryDashboard.status.itemsPerPage = value;
    $(InventoryDashboard.htmlBindings.drpItemPerPageValue).text(value);
    InventoryDashboard.status.currentPage = 1;
    InventoryDashboard.functions.paginate();
    return this;
  };

  InventoryDashboard.eventHandlers.pager_btnPagerPages_onClick = function(event) {
    var $target, value;
    $target = $(event.target);
    value = $target.data('page');
    InventoryDashboard.status.currentPage = value;
    InventoryDashboard.functions.paginate();
    return this;
  };

  InventoryDashboard.eventHandlers.table_body_btnSort_onClick = function(event) {
    var $target, sortingField;
    $target = $(event.target);
    sortingField = $target.data('field');
    if (InventoryDashboard.status.table_header_sortLastButton !== null) {
      InventoryDashboard.status.table_header_sortLastButton.removeClass('asc desc');
    }
    if (InventoryDashboard.status.table_header_sortField !== sortingField) {
      InventoryDashboard.status.table_header_sortFieldOrder = '';
    }
    InventoryDashboard.status.table_header_sortField = sortingField;
    if (InventoryDashboard.status.table_header_sortFieldOrder === 'ASC') {
      InventoryDashboard.status.table_header_sortFieldOrder = 'DESC';
      $target.addClass('asc').removeClass('desc');
    } else {
      InventoryDashboard.status.table_header_sortFieldOrder = 'ASC';
      $target.addClass('desc').removeClass('asc');
    }
    InventoryDashboard.status.table_header_sortLastButton = $target;
    InventoryDashboard.functions.paginate();
    return this;
  };

  InventoryDashboard.eventHandlers.table_body_btnAttach_onClick = function(event) {
    var currentItemno, currentProjectRoot;
    currentItemno = $(this).data('itemno');
    currentProjectRoot = currentItemno + '_IN';
    InventoryDashboard.status.currentItemno = currentProjectRoot;
    console.log(ProjectFiles);
    ProjectFiles.functions.loadFileTree(currentProjectRoot);
    $(ProjectFiles.htmlBindings.modal_ProjectFiles).modal('show');
    return this;
  };

  InventoryDashboard.init = function(defaultUserFilter) {
    InventoryDashboard.status.itemsPerPage = $(InventoryDashboard.htmlBindings.drpItemPerPageValue).text();
    DynamicFilter.init(defaultUserFilter);
    ProjectFiles.init();
    InventoryDashboard.functions.bindEventHandlers();
    return this;
  };

}).call(this);

//# sourceMappingURL=main.js.map
