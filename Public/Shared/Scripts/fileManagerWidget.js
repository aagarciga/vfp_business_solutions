// Generated by CoffeeScript 1.9.3
(function() {
  var $, App, Dropzone, FileManager, global,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  global = window;

  $ = global.jQuery;

  Dropzone = global.Dropzone;

  App = global.App;

  App.FileManager = FileManager = (function() {
    FileManager.prototype.status = {
      dropzone: null,
      jsTree: null
    };

    FileManager.prototype.htmlBindings = {
      modal_ProjectFiles: '#project-files-modal',
      dropzone: '#projectFilesDropzone',
      dropzone_previews: '.dz-preview',
      jsTree: '#project-files-jstree',
      jsTree_SearchControl: '#tree-search'
    };

    function FileManager(urlGetNode, urlGetContent, urlCreate, urlDelete, urlRename, urlMove, urlCopy, urlDeleteFile) {
      this.urlGetNode = urlGetNode;
      this.urlGetContent = urlGetContent;
      this.urlCreate = urlCreate;
      this.urlDelete = urlDelete;
      this.urlRename = urlRename;
      this.urlMove = urlMove;
      this.urlCopy = urlCopy;
      this.urlDeleteFile = urlDeleteFile;
      this.deleteDir = bind(this.deleteDir, this);
      this.renameDir = bind(this.renameDir, this);
      this.createDir = bind(this.createDir, this);
      this.loadFileTree = bind(this.loadFileTree, this);
      this.bindJsTreeSearching = bind(this.bindJsTreeSearching, this);
      this.dropzoneReset = bind(this.dropzoneReset, this);
      this.init = bind(this.init, this);
    }

    FileManager.prototype.init = function() {
      var self;
      self = this;
      Dropzone.options.projectFilesDropzone = false;
      console.log(Dropzone.options);
      return this.status.dropzone = new Dropzone(this.htmlBindings.dropzone, {
        paramName: "file",
        maxFilesize: 1024,
        maxThumbnailFilesize: 1,
        addRemoveLinks: true,
        accept: function(file, done) {
          if (file.name === "Alex.jpg") {
            return done("Hi creator!");
          } else {
            return done;
          }
        },
        init: function() {
          this.on('sending', function(file, xhr, formData) {
            var jsTreeInstance, selectedDir;
            console.log("sending event triggered");
            jsTreeInstance = self.status.jsTree.jstree(true);
            selectedDir = jsTreeInstance.get_selected();
            file.ready4Remove = true;
            file.uploadPath = self.currentId + '/' + selectedDir;
            if (self.currentId) {
              formData.append('rootDir', self.currentId);
              return formData.append('selectedDir', selectedDir);
            }
          });
          this.on('removedfile', function(file) {
            var params, selectedDir;
            console.log("removing event triggered");
            selectedDir = self.status.jsTree.jstree(true).get_selected();
            params = {
              rootDir: self.currentId,
              selectedDir: selectedDir[0],
              fileName: file.name
            };
            if (file.ready4Remove) {
              $('.loading').show();
              $.post(self.urlDeleteFile, params).done(function() {
                return $('.loading').hide();
              }).fail(function() {
                return $('.loading').hide();
              });
            }
            return file.ready4Remove = true;
          });
          return this;
        }
      });
    };

    FileManager.prototype.dropzoneReset = function() {
      var file;
      for (file in this.status.dropzone.files) {
        file.ready4Remove = false;
      }
      this.status.dropzone.removeAllFiles();
      $(this.htmlBindings.dropzone_previews).children('.dz-preview').remove();
      $(this.htmlBindings.dropzone).children('.dz-message.custom').css('opacity', '1');
      return void 0;
    };

    FileManager.prototype.bindJsTreeSearching = function() {
      return $(this.htmlBindings.jsTree_SearchControl).on('keyup', (function(_this) {
        return function() {
          var to;
          if (to) {
            clearTimeout(to);
          }
          return to = setTimeout(function() {
            var value;
            value = $(_this.htmlBindings.jsTree_SearchControl).val();
            return _this.status.jsTree.jstree(true).search(value);
          }, 250);
        };
      })(this));
    };

    FileManager.prototype.loadFileTree = function(id) {
      this.currentId = id;
      if (this.status.jsTree != null) {
        this.status.jsTree.jstree(true).destroy();
      }
      this.status.jsTree = $(this.htmlBindings.jsTree).jstree({
        id: this.htmlBindings.jsTree,
        plugins: ['state', 'dnd', 'sort', 'types', 'contextmenu', 'unique', 'search'],
        searchControlId: this.htmlBindings.jsTree_SearchControl,
        core: {
          animation: true,
          themes: {
            name: 'default',
            responsive: false,
            variant: 'medium',
            stripes: false
          },
          data: {
            url: this.urlGetNode + '&rootDir=' + id,
            data: function(node) {
              return {
                id: node.id
              };
            }
          },
          check_callback: function(operation, node, node_parent, node_position, more) {
            var result;
            result = true;
            if (more && more.dnd && more.pos !== 'i') {
              result = false;
            }
            if ((operation === 'move_node') || (operation === 'copy_node')) {
              if (this.get_node(node).parent === this.get_node(node_parent).id) {
                result = false;
              }
            }
            return result;
          },
          error: function(instance) {
            return console.log('Error callback:', instance);
          }
        },
        sort: function(a, b) {
          var result;
          result = -1;
          if (this.get_type(a) === this.get_type(b)) {
            if (this.get_text(a) > this.get_text(b)) {
              return result = 1;
            }
          } else {
            if (this.get_type(a) >= this.get_type(b)) {
              return result = 1;
            }
          }
        },
        types: {
          '#': {
            max_children: 1,
            valid_children: ['default'],
            icon: 'glyphicon glyphicon-folder-open'
          },
          'default': {
            valid_children: ['default'],
            icon: 'glyphicon glyphicon-folder-close'
          }
        },
        contextmenu: {
          items: function(node) {
            var tmp;
            tmp = $.jstree.defaults.contextmenu.items();
            console.log(tmp);
            delete tmp.ccp;
            if (this.get_type(node) === "file") {
              delete tmp.create;
            }
            return tmp;
          }
        },
        unique: {
          duplicate: function(name, counter) {
            return name + ' ' + counter;
          }
        }
      }).on('delete_node.jstree', (function(_this) {
        return function(event, data) {
          var params;
          params = {
            rootDir: id,
            'id': data.node.id
          };
          $('.loading').show();
          return $.get(_this.urlDelete, params).done(function() {
            return $('.loading').hide();
          }).fail(function() {
            data.instance.refresh();
            return $('.loading').hide();
          });
        };
      })(this)).on('create_node.jstree', (function(_this) {
        return function(event, data) {
          var params;
          params = {
            rootDir: id,
            'type': data.node.type,
            'id': data.node.parent,
            'text': data.node.text
          };
          $('.loading').show();
          return $.get(_this.urlCreate, params).done(function(response) {
            data.instance.set_id(data.node, response.id);
            return $('.loading').hide();
          }).fail(function() {
            data.instance.refresh();
            return $('.loading').hide();
          });
        };
      })(this)).on('rename_node.jstree', (function(_this) {
        return function(event, data) {
          var params;
          params = {
            rootDir: id,
            'type': data.node.type,
            'id': data.node.id,
            'text': data.text
          };
          $('.loading').show();
          return $.get(_this.urlRename, params).done(function(response) {
            data.instance.set_id(data.node, response.id);
            return $('.loading').hide();
          }).fail(function() {
            data.instance.refresh();
            return $('.loading').hide();
          });
        };
      })(this)).on('move_node.jstree', (function(_this) {
        return function(event, data) {
          var params;
          params = {
            rootDir: id,
            'id': data.node.id,
            'parent': data.parent
          };
          $('.loading').show();
          return $.get(_this.urlMove, params).done(function() {
            data.instance.refresh();
            return $('.loading').hide();
          }).fail(function() {
            data.instance.refresh();
            return $('.loading').hide();
          });
        };
      })(this)).on('copy_node.jstree', (function(_this) {
        return function(event, data) {
          var params;
          params = {
            rootDir: id,
            'id': data.original.id,
            'parent': data.parent
          };
          $('.loading').show();
          return $.get(_this.urlCopy, params).done(function() {
            data.instance.load_node(data.parent);
            data.instance.refresh();
            return $('.loading').hide();
          }).fail(function() {
            data.instance.refresh();
            return $('.loading').hide();
          });
        };
      })(this)).on('changed_node.jstree', (function(_this) {
        return function(event, data) {
          var params;
          console.log('changed');
          params = {
            rootDir: id,
            'id': data.original.id
          };
          $('.loading').show();
          return console.log("root: ", params.rootDir, "id: ", params.id);
        };
      })(this));
      this.bindJsTreeSearching(false);
      return this.status.jsTree.jstree(true).select_node(id);
    };

    FileManager.prototype.createDir = function() {
      var jsTree, selectedDir;
      jsTree = this.status.jsTree.jstree(true);
      selectedDir = jsTree.get_selected();
      if (!selectedDir.length) {
        false;
      }
      selectedDir = selectedDir[0];
      return jsTree.create_node(selectedDir, {
        type: 'default'
      }, 'last', function(new_node) {
        return setTimeout(function() {
          return jsTree.edit(new_node);
        }, 0);
      });
    };

    FileManager.prototype.renameDir = function() {
      var jsTree, selectedDir;
      jsTree = this.status.jsTree.jstree(true);
      selectedDir = jsTree.get_selected();
      if (!selectedDir.length) {
        false;
      }
      selectedDir = selectedDir[0];
      return jsTree.edit(selectedDir);
    };

    FileManager.prototype.deleteDir = function() {
      var jsTree, result, selectedDir;
      result = true;
      jsTree = this.status.jsTree.jstree(true);
      selectedDir = jsTree.get_selected();
      if (!selectedDir.length) {
        result = false;
      }
      if (selectedDir[0] === "\/") {
        result = false;
      }
      jsTree.delete_node(selectedDir);
      this.dropzoneReset();
      return result;
    };

    return FileManager;

  })();

}).call(this);
