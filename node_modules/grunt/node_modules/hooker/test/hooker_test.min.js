var hooker=require("../lib/hooker");exports.hook={setUp:function(a){this.order=[];this.track=function(){[].push.apply(this.order,arguments)};this.prop=1;this.add=function(d,c){this.track("add",this.prop,d,c);return this.prop+d+c};this.obj={that:this,prop:1,add1:function(d,c){this.that.track("add1",this.prop,d,c);return this.prop+d+c},add2:function(d,c){this.that.track("add2",this.prop,d,c);return this.prop+d+c},add3:function(d,c){this.that.track("add3",this.prop,d,c);return this.prop+d+c}};a()},orig:function(b){b.expect(1);var a=this.add;hooker.hook(this,"add",function(){});b.strictEqual(hooker.orig(this,"add"),a,"should return a refernce to the original function.");b.done()},once:function(b){b.expect(5);var a=this.add;hooker.hook(this,"add",{once:true,pre:function(d,c){this.track("before",this.prop,d,c)}});b.strictEqual(this.add(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order.");b.strictEqual(this.add,a,"should automatically unhook when once is specified.");this.order=[];b.strictEqual(this.add(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["add",1,2,3],"only the original function should execute.");b.done()},"pre-hook (simple syntax)":function(b){b.expect(3);var a=hooker.hook(this,"add",function(d,c){this.track("before",this.prop,d,c)});b.deepEqual(a,["add"],"add should have been hooked.");b.strictEqual(this.add(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order.");b.done()},"pre-hook":function(b){b.expect(3);var a=hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c)}});b.deepEqual(a,["add"],"add should have been hooked.");b.strictEqual(this.add(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order.");b.done()},"post-hook":function(b){b.expect(3);var a=hooker.hook(this,"add",{post:function(d,e,c){this.track("after",this.prop,e,c,d)}});b.deepEqual(a,["add"],"add should have been hooked.");b.strictEqual(this.add(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["add",1,2,3,"after",1,2,3,6],"functions should execute in-order.");b.done()},"pre- & post-hook":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c)},post:function(d,e,c){this.track("after",this.prop,e,c,d)}});a.strictEqual(this.add(2,3),6,"should return the original function's result.");a.deepEqual(this.order,["before",1,2,3,"add",1,2,3,"after",1,2,3,6],"functions should execute in-order.");a.done()},"pre-hook, return value override":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.override("b"+this.prop+d+c)}});a.strictEqual(this.add(2,3),"b123","should return the overridden result.");a.deepEqual(this.order,["before",1,2,3,"add",1,2,3],"functions should execute in-order.");a.done()},"post-hook, return value override":function(a){a.expect(2);hooker.hook(this,"add",{post:function(d,e,c){this.track("after",this.prop,e,c,d);return hooker.override("a"+this.prop+e+c+d)}});a.strictEqual(this.add(2,3),"a1236","should return the post-hook overridden result.");a.deepEqual(this.order,["add",1,2,3,"after",1,2,3,6],"functions should execute in-order.");a.done()},"pre- & post-hook, return value override":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.override("b"+this.prop+d+c)},post:function(d,e,c){this.track("after",this.prop,e,c,d);return hooker.override("a"+this.prop+e+c+d)}});a.strictEqual(this.add(2,3),"a1236","should return the overridden result, and post-hook result should take precedence over pre-hook result.");a.deepEqual(this.order,["before",1,2,3,"add",1,2,3,"after",1,2,3,6],"functions should execute in-order.");a.done()},"pre-hook, filtering arguments":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.filter({prop:"x",track:this.track,order:this.order},["y","z"])}});a.strictEqual(this.add(2,3),"xyz","should return the original function's result, given filtered context and arguments.");a.deepEqual(this.order,["before",1,2,3,"add","x","y","z"],"functions should execute in-order.");a.done()},"pre- & post-hook, filtering arguments":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.filter({prop:"x",track:this.track,order:this.order},["y","z"])},post:function(d,e,c){this.track("after",this.prop,e,c,d)}});a.strictEqual(this.add(2,3),"xyz","should return the original function's result, given filtered context and arguments.");a.deepEqual(this.order,["before",1,2,3,"add","x","y","z","after",1,2,3,"xyz"],"functions should execute in-order.");a.done()},"pre- & post-hook, filtering arguments, return value override":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.filter({prop:"x",track:this.track,order:this.order},["y","z"])},post:function(d,e,c){this.track("after",this.prop,e,c,d);return hooker.override("a"+this.prop+e+c+d)}});a.strictEqual(this.add(2,3),"a123xyz","should return the post-hook overridden result.");a.deepEqual(this.order,["before",1,2,3,"add","x","y","z","after",1,2,3,"xyz"],"functions should execute in-order.");a.done()},"pre-hook, preempt original function":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.preempt()}});a.strictEqual(this.add(2,3),undefined,"should return the value passed to preempt.");a.deepEqual(this.order,["before",1,2,3],"functions should execute in-order.");a.done()},"pre-hook, preempt original function with value":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.preempt(9000)}});a.strictEqual(this.add(2,3),9000,"should return the value passed to preempt.");a.deepEqual(this.order,["before",1,2,3],"functions should execute in-order.");a.done()},"pre- & post-hook, preempt original function with value":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.preempt(9000)},post:function(d,e,c){this.track("after",this.prop,e,c,d)}});a.strictEqual(this.add(2,3),9000,"should return the value passed to preempt.");a.deepEqual(this.order,["before",1,2,3,"after",1,2,3,9000],"functions should execute in-order.");a.done()},"pre- & post-hook, preempt original function with value, return value override":function(a){a.expect(2);hooker.hook(this,"add",{pre:function(d,c){this.track("before",this.prop,d,c);return hooker.preempt(9000)},post:function(d,e,c){this.track("after",this.prop,e,c,d);return hooker.override("a"+this.prop+e+c+d)}});a.strictEqual(this.add(2,3),"a1239000","should return the overridden result, and post-hook result should take precedence over preempt value.");a.deepEqual(this.order,["before",1,2,3,"after",1,2,3,9000],"functions should execute in-order.");a.done()},"pre- & post-hook, some properties":function(b){b.expect(7);var a=hooker.hook(this.obj,["add1","add2"],{pre:function(d,c){this.that.track("before",this.prop,d,c)},post:function(d,e,c){this.that.track("after",this.prop,e,c,d)}});b.deepEqual(a.sort(),["add1","add2"],"both functions should have been hooked.");b.strictEqual(this.obj.add1(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add1",1,2,3,"after",1,2,3,6],"functions should execute in-order.");this.order=[];b.strictEqual(this.obj.add2(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add2",1,2,3,"after",1,2,3,6],"functions should execute in-order.");this.order=[];b.strictEqual(this.obj.add3(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["add3",1,2,3],"functions should execute in-order.");b.done()},"pre- & post-hook, all properties":function(b){b.expect(7);var a=hooker.hook(this.obj,{pre:function(d,c){this.that.track("before",this.prop,d,c)},post:function(d,e,c){this.that.track("after",this.prop,e,c,d)}});b.deepEqual(a.sort(),["add1","add2","add3"],"all functions should have been hooked.");b.strictEqual(this.obj.add1(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add1",1,2,3,"after",1,2,3,6],"functions should execute in-order.");this.order=[];b.strictEqual(this.obj.add2(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add2",1,2,3,"after",1,2,3,6],"functions should execute in-order.");this.order=[];b.strictEqual(this.obj.add3(2,3),6,"should return the original function's result.");b.deepEqual(this.order,["before",1,2,3,"add3",1,2,3,"after",1,2,3,6],"functions should execute in-order.");b.done()},"pre- & post-hook, all properties, passName":function(a){a.expect(6);hooker.hook(this.obj,{passName:true,pre:function(e,d,c){this.that.track("before",this.prop,e,d,c)},post:function(d,f,e,c){this.that.track("after",this.prop,f,e,c,d)}});a.strictEqual(this.obj.add1(2,3),6,"should return the original function's result.");a.deepEqual(this.order,["before",1,"add1",2,3,"add1",1,2,3,"after",1,"add1",2,3,6],"functions should execute in-order.");this.order=[];a.strictEqual(this.obj.add2(2,3),6,"should return the original function's result.");a.deepEqual(this.order,["before",1,"add2",2,3,"add2",1,2,3,"after",1,"add2",2,3,6],"functions should execute in-order.");this.order=[];a.strictEqual(this.obj.add3(2,3),6,"should return the original function's result.");a.deepEqual(this.order,["before",1,"add3",2,3,"add3",1,2,3,"after",1,"add3",2,3,6],"functions should execute in-order.");a.done()},"unhook one property":function(c){c.expect(5);var b=this.add;hooker.hook(this,"add",function(){});var a=hooker.unhook(this,"add");c.deepEqual(a,["add"],"one function should have been unhooked.");c.strictEqual(this.add,b,"should have unhooked, restoring the original function");a=hooker.unhook(this,"add");c.deepEqual(a,[],"nothing should have been unhooked.");c.strictEqual(this.add,b,"shouldn't explode if already unhooked");c.strictEqual(this.add.orig,undefined,"original function shouldn't have an orig property");c.done()},"unhook some properties":function(d){d.expect(6);var c=this.obj.add1;var b=this.obj.add2;hooker.hook(this.obj,["add1","add2"],function(){});d.strictEqual(hooker.orig(this.obj,"add1"),c,"should return a refernce to the original function");d.strictEqual(hooker.orig(this.obj,"add2"),b,"should return a refernce to the original function");d.strictEqual(hooker.orig(this.obj,"add3"),undefined,"should not have been hooked, so should not have an original function");var a=hooker.unhook(this.obj,["add1","add2"]);d.deepEqual(a.sort(),["add1","add2"],"both functions should have been unhooked.");d.strictEqual(this.obj.add1,c,"should have unhooked, restoring the original function");d.strictEqual(this.obj.add2,b,"should have unhooked, restoring the original function");d.done()},"unhook all properties":function(e){e.expect(7);var d=this.obj.add1;var c=this.obj.add2;var b=this.obj.add3;hooker.hook(this.obj,function(){});e.strictEqual(hooker.orig(this.obj,"add1"),d,"should return a refernce to the original function");e.strictEqual(hooker.orig(this.obj,"add2"),c,"should return a refernce to the original function");e.strictEqual(hooker.orig(this.obj,"add3"),b,"should return a refernce to the original function");var a=hooker.unhook(this.obj);e.deepEqual(a.sort(),["add1","add2","add3"],"all functions should have been unhooked.");e.strictEqual(this.obj.add1,d,"should have unhooked, restoring the original function");e.strictEqual(this.obj.add2,c,"should have unhooked, restoring the original function");e.strictEqual(this.obj.add3,b,"should have unhooked, restoring the original function");e.done()}};