"use strict";var NIL=require("../common").NIL;var Type=require("../type");var YAML_FLOAT_PATTERN=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?|\\.[0-9_]+(?:[eE][-+][0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function resolveYamlFloat(b){var e,a,d,c;if(!YAML_FLOAT_PATTERN.test(b)){return NIL}e=b.replace(/_/g,"").toLowerCase();a="-"===e[0]?-1:1;c=[];if(0<="+-".indexOf(e[0])){e=e.slice(1)}if(".inf"===e){return(1===a)?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY}else{if(".nan"===e){return NaN}else{if(0<=e.indexOf(":")){e.split(":").forEach(function(f){c.unshift(parseFloat(f,10))});e=0;d=1;c.forEach(function(f){e+=f*d;d*=60});return a*e}else{return a*parseFloat(e,10)}}}}function representYamlFloat(a,b){if(isNaN(a)){switch(b){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}}else{if(Number.POSITIVE_INFINITY===a){switch(b){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}}else{if(Number.NEGATIVE_INFINITY===a){switch(b){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}}else{return a.toString(10)}}}}module.exports=new Type("tag:yaml.org,2002:float",{loader:{kind:"string",resolver:resolveYamlFloat},dumper:{kind:"float",defaultStyle:"lowercase",representer:representYamlFloat}});