"use strict";var common=require("./common");var YAMLException=require("./exception");var Type=require("./type");function compileList(d,c,a){var b=[];d.include.forEach(function(e){a=compileList(e,c,a)});d[c].forEach(function(e){a.forEach(function(f,g){if(f.tag===e.tag){b.push(g)}});a.push(e)});return a.filter(function(f,e){return -1===b.indexOf(e)})}function compileMap(){var a={},c,d;function b(e){a[e.tag]=e}for(c=0,d=arguments.length;c<d;c+=1){arguments[c].forEach(b)}return a}function Schema(a){this.include=a.include||[];this.implicit=a.implicit||[];this.explicit=a.explicit||[];this.implicit.forEach(function(b){if(null!==b.loader&&"string"!==b.loader.kind){throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}});this.compiledImplicit=compileList(this,"implicit",[]);this.compiledExplicit=compileList(this,"explicit",[]);this.compiledTypeMap=compileMap(this.compiledImplicit,this.compiledExplicit)}Schema.DEFAULT=null;Schema.create=function createSchema(){var a,b;switch(arguments.length){case 1:a=Schema.DEFAULT;b=arguments[0];break;case 2:a=arguments[0];b=arguments[1];break;default:throw new YAMLException("Wrong number of arguments for Schema.create function")}a=common.toArray(a);b=common.toArray(b);if(!a.every(function(c){return c instanceof Schema})){throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.")}if(!b.every(function(c){return c instanceof Type})){throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.")}return new Schema({include:a,explicit:b})};module.exports=Schema;