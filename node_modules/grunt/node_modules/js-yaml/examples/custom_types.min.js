"use strict";var fs=require("fs");var path=require("path");var util=require("util");var yaml=require("../lib/js-yaml");function Point(a,c,b){this.klass="Point";this.x=a;this.y=c;this.z=b}function Space(a,c,b){if(b){if(!b.every(function(d){return d instanceof Point})){throw new Error("A non-Point inside a points array!")}}this.klass="Space";this.height=a;this.width=c;this.points=b}var pointYamlType=new yaml.Type("!point",{loader:{kind:"array",resolver:function(a){if(3===a.length){return new Point(a[0],a[1],a[2])}else{return yaml.NIL}}},dumper:{kind:"object",instanceOf:Point,representer:function(a){return[a.x,a.y,a.z]}}});var spaceYamlType=new yaml.Type("!space",{loader:{kind:"object",resolver:function(a){return new Space(a.height,a.width,a.points)}},dumper:{kind:"object",instanceOf:Space}});var SPACE_SCHEMA=yaml.Schema.create([spaceYamlType,pointYamlType]);fs.readFile(path.join(__dirname,"custom_types.yaml"),"utf8",function(b,c){var a;if(!b){a=yaml.load(c,{schema:SPACE_SCHEMA});console.log(util.inspect(a,false,20,true))}else{console.error(b.stack||b.message||String(b))}});module.exports.Point=Point;module.exports.Space=Space;module.exports.pointYamlType=pointYamlType;module.exports.spaceYamlType=spaceYamlType;module.exports.SPACE_SCHEMA=SPACE_SCHEMA;