$(document).ready(function(){module("Objects");test("keys",function(){equal(_.keys({one:1,two:2}).join(", "),"one, two","can extract the keys from an object");var c=[];c[1]=0;equal(_.keys(c).join(", "),"1","is not fooled by sparse arrays; see issue #95");raises(function(){_.keys(null)},TypeError,"throws an error for `null` values");raises(function(){_.keys(void 0)},TypeError,"throws an error for `undefined` values");raises(function(){_.keys(1)},TypeError,"throws an error for number primitives");raises(function(){_.keys("a")},TypeError,"throws an error for string primitives");raises(function(){_.keys(true)},TypeError,"throws an error for boolean primitives")});test("values",function(){equal(_.values({one:1,two:2}).join(", "),"1, 2","can extract the values from an object");equal(_.values({one:1,two:2,length:3}).join(", "),"1, 2, 3",'... even when one of them is "length"')});test("pairs",function(){deepEqual(_.pairs({one:1,two:2}),[["one",1],["two",2]],"can convert an object into pairs");deepEqual(_.pairs({one:1,two:2,length:3}),[["one",1],["two",2],["length",3]],'... even when one of them is "length"')});test("invert",function(){var c={first:"Moe",second:"Larry",third:"Curly"};equal(_.keys(_.invert(c)).join(" "),"Moe Larry Curly","can invert an object");ok(_.isEqual(_.invert(_.invert(c)),c),"two inverts gets you back where you started");var c={length:3};ok(_.invert(c)["3"]=="length",'can invert an object with "length"')});test("functions",function(){var d={a:"dash",b:_.map,c:(/yo/),d:_.reduce};ok(_.isEqual(["b","d"],_.functions(d)),"can grab the function names of any passed-in object");var c=function(){};c.prototype.run=function(){};equal(_.functions(new c).join(""),"run","also looks up functions on the prototype")});test("extend",function(){var c;equal(_.extend({},{a:"b"}).a,"b","can extend an object with the attributes of another");equal(_.extend({a:"x"},{a:"b"}).a,"b","properties in source override destination");equal(_.extend({x:"x"},{a:"b"}).x,"x","properties not in source dont get overriden");c=_.extend({x:"x"},{a:"a"},{b:"b"});ok(_.isEqual(c,{x:"x",a:"a",b:"b"}),"can extend from multiple source objects");c=_.extend({x:"x"},{a:"a",x:2},{a:"b"});ok(_.isEqual(c,{x:2,a:"b"}),"extending from multiple source objects last property trumps");c=_.extend({},{a:void 0,b:null});equal(_.keys(c).join(""),"ab","extend does not copy undefined values")});test("pick",function(){var c;c=_.pick({a:1,b:2,c:3},"a","c");ok(_.isEqual(c,{a:1,c:3}),"can restrict properties to those named");c=_.pick({a:1,b:2,c:3},["b","c"]);ok(_.isEqual(c,{b:2,c:3}),"can restrict properties to those named in an array");c=_.pick({a:1,b:2,c:3},["a"],"b");ok(_.isEqual(c,{a:1,b:2}),"can restrict properties to those named in mixed args");var d=function(){};d.prototype={a:1,b:2,c:3};ok(_.isEqual(_.pick(new d,"a","c"),{a:1,c:3}),"include prototype props")});test("omit",function(){var c;c=_.omit({a:1,b:2,c:3},"b");ok(_.isEqual(c,{a:1,c:3}),"can omit a single named property");c=_.omit({a:1,b:2,c:3},"a","c");ok(_.isEqual(c,{b:2}),"can omit several named properties");c=_.omit({a:1,b:2,c:3},["b","c"]);ok(_.isEqual(c,{a:1}),"can omit properties named in an array");var d=function(){};d.prototype={a:1,b:2,c:3};ok(_.isEqual(_.omit(new d,"b"),{a:1,c:3}),"include prototype props")});test("defaults",function(){var c;var d={zero:0,one:1,empty:"",nan:NaN,string:"string"};_.defaults(d,{zero:1,one:10,twenty:20});equal(d.zero,0,"value exists");equal(d.one,1,"value exists");equal(d.twenty,20,"default applied");_.defaults(d,{empty:"full"},{nan:"nan"},{word:"word"},{word:"dog"});equal(d.empty,"","value exists");ok(_.isNaN(d.nan),"NaN isn't overridden");equal(d.word,"word","new value is added, first one wins")});test("clone",function(){var c={name:"moe",lucky:[13,27,34]};var d=_.clone(c);equal(d.name,"moe","the clone as the attributes of the original");d.name="curly";ok(d.name=="curly"&&c.name=="moe","clones can change shallow attributes without affecting the original");d.lucky.push(101);equal(_.last(c.lucky),101,"changes to deep attributes are shared with the original");equal(_.clone(undefined),void 0,"non objects should not be changed by clone");equal(_.clone(1),1,"non objects should not be changed by clone");equal(_.clone(null),null,"non objects should not be changed by clone")});test("isEqual",function(){function f(){this.value=1}f.prototype.value=1;function e(){this.value=1}e.prototype.value=2;ok(_.isEqual(null,null),"`null` is equal to `null`");ok(_.isEqual(),"`undefined` is equal to `undefined`");ok(!_.isEqual(0,-0),"`0` is not equal to `-0`");ok(!_.isEqual(-0,0),"Commutative equality is implemented for `0` and `-0`");ok(!_.isEqual(null,undefined),"`null` is not equal to `undefined`");ok(!_.isEqual(undefined,null),"Commutative equality is implemented for `null` and `undefined`");ok(_.isEqual("Curly","Curly"),"Identical string primitives are equal");ok(_.isEqual(new String("Curly"),new String("Curly")),"String objects with identical primitive values are equal");ok(_.isEqual(new String("Curly"),"Curly"),"String primitives and their corresponding object wrappers are equal");ok(_.isEqual("Curly",new String("Curly")),"Commutative equality is implemented for string objects and primitives");ok(!_.isEqual("Curly","Larry"),"String primitives with different values are not equal");ok(!_.isEqual(new String("Curly"),new String("Larry")),"String objects with different primitive values are not equal");ok(!_.isEqual(new String("Curly"),{toString:function(){return"Curly"}}),"String objects and objects with a custom `toString` method are not equal");ok(_.isEqual(75,75),"Identical number primitives are equal");ok(_.isEqual(new Number(75),new Number(75)),"Number objects with identical primitive values are equal");ok(_.isEqual(75,new Number(75)),"Number primitives and their corresponding object wrappers are equal");ok(_.isEqual(new Number(75),75),"Commutative equality is implemented for number objects and primitives");ok(!_.isEqual(new Number(0),-0),"`new Number(0)` and `-0` are not equal");ok(!_.isEqual(0,new Number(-0)),"Commutative equality is implemented for `new Number(0)` and `-0`");ok(!_.isEqual(new Number(75),new Number(63)),"Number objects with different primitive values are not equal");ok(!_.isEqual(new Number(63),{valueOf:function(){return 63}}),"Number objects and objects with a `valueOf` method are not equal");ok(_.isEqual(NaN,NaN),"`NaN` is equal to `NaN`");ok(!_.isEqual(61,NaN),"A number primitive is not equal to `NaN`");ok(!_.isEqual(new Number(79),NaN),"A number object is not equal to `NaN`");ok(!_.isEqual(Infinity,NaN),"`Infinity` is not equal to `NaN`");ok(_.isEqual(true,true),"Identical boolean primitives are equal");ok(_.isEqual(new Boolean,new Boolean),"Boolean objects with identical primitive values are equal");ok(_.isEqual(true,new Boolean(true)),"Boolean primitives and their corresponding object wrappers are equal");ok(_.isEqual(new Boolean(true),true),"Commutative equality is implemented for booleans");ok(!_.isEqual(new Boolean(true),new Boolean),"Boolean objects with different primitive values are not equal");ok(!_.isEqual(true,new Boolean(false)),"Boolean objects are not equal to the boolean primitive `true`");ok(!_.isEqual("75",75),"String and number primitives with like values are not equal");ok(!_.isEqual(new Number(63),new String(63)),"String and number objects with like values are not equal");ok(!_.isEqual(75,"75"),"Commutative equality is implemented for like string and number values");ok(!_.isEqual(0,""),"Number and string primitives with like values are not equal");ok(!_.isEqual(1,true),"Number and boolean primitives with like values are not equal");ok(!_.isEqual(new Boolean(false),new Number(0)),"Boolean and number objects with like values are not equal");ok(!_.isEqual(false,new String("")),"Boolean primitives and string objects with like values are not equal");ok(!_.isEqual(1256450400000,new Date(2009,9,25)),"Dates and their corresponding numeric primitive values are not equal");ok(_.isEqual(new Date(2009,9,25),new Date(2009,9,25)),"Date objects referencing identical times are equal");ok(!_.isEqual(new Date(2009,9,25),new Date(2009,11,13)),"Date objects referencing different times are not equal");ok(!_.isEqual(new Date(2009,11,13),{getTime:function(){return 1260687600000}}),"Date objects and objects with a `getTime` method are not equal");ok(!_.isEqual(new Date("Curly"),new Date("Curly")),"Invalid dates are not equal");ok(!_.isEqual(f,e),"Different functions with identical bodies and source code representations are not equal");ok(_.isEqual(/(?:)/gim,/(?:)/gim),"RegExps with equivalent patterns and flags are equal");ok(!_.isEqual(/(?:)/g,/(?:)/gi),"RegExps with equivalent patterns and different flags are not equal");ok(!_.isEqual(/Moe/gim,/Curly/gim),"RegExps with different patterns and equivalent flags are not equal");ok(!_.isEqual(/(?:)/gi,/(?:)/g),"Commutative equality is implemented for RegExps");ok(!_.isEqual(/Curly/g,{source:"Larry",global:true,ignoreCase:false,multiline:false}),"RegExps and RegExp-like objects are not equal");ok(_.isEqual({},{}),"Empty object literals are equal");ok(_.isEqual([],[]),"Empty array literals are equal");ok(_.isEqual([{}],[{}]),"Empty nested arrays and objects are equal");ok(!_.isEqual({length:0},[]),"Array-like objects and arrays are not equal.");ok(!_.isEqual([],{length:0}),"Commutative equality is implemented for array-like objects");ok(!_.isEqual({},[]),"Object literals and array literals are not equal");ok(!_.isEqual([],{}),"Commutative equality is implemented for objects and arrays");ok(_.isEqual([1,"Larry",true],[1,"Larry",true]),"Arrays containing identical primitives are equal");ok(_.isEqual([(/Moe/g),new Date(2009,9,25)],[(/Moe/g),new Date(2009,9,25)]),"Arrays containing equivalent elements are equal");var d=[new Number(47),false,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}];var c=[new Number(47),false,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}];ok(_.isEqual(d,c),"Arrays containing nested arrays and objects are recursively compared");d.forEach=d.map=d.filter=d.every=d.indexOf=d.lastIndexOf=d.some=d.reduce=d.reduceRight=null;c.join=c.pop=c.reverse=c.shift=c.slice=c.splice=c.concat=c.sort=c.unshift=null;ok(_.isEqual(d,c),"Arrays containing equivalent elements and different non-numeric properties are equal");d.push("White Rocks");ok(!_.isEqual(d,c),"Arrays of different lengths are not equal");d.push("East Boulder");c.push("Gunbarrel Ranch","Teller Farm");ok(!_.isEqual(d,c),"Arrays of identical lengths containing different elements are not equal");ok(_.isEqual(Array(3),Array(3)),"Sparse arrays of identical lengths are equal");ok(!_.isEqual(Array(3),Array(6)),"Sparse arrays of different lengths are not equal when both are empty");ok(_.isEqual({a:"Curly",b:1,c:true},{a:"Curly",b:1,c:true}),"Objects containing identical primitives are equal");ok(_.isEqual({a:/Curly/g,b:new Date(2009,11,13)},{a:/Curly/g,b:new Date(2009,11,13)}),"Objects containing equivalent members are equal");ok(!_.isEqual({a:63,b:75},{a:61,b:55}),"Objects of identical sizes with different values are not equal");ok(!_.isEqual({a:63,b:75},{a:61,c:55}),"Objects of identical sizes with different property names are not equal");ok(!_.isEqual({a:1,b:2},{a:1}),"Objects of different sizes are not equal");ok(!_.isEqual({a:1},{a:1,b:2}),"Commutative equality is implemented for objects");ok(!_.isEqual({x:1,y:undefined},{x:1,z:2}),"Objects with identical keys and different values are not equivalent");d={name:new String("Moe Howard"),age:new Number(77),stooge:true,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}};c={name:new String("Moe Howard"),age:new Number(77),stooge:true,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}};ok(_.isEqual(d,c),"Objects with nested equivalent members are recursively compared");ok(_.isEqual(new f,new f),"Object instances are equal");ok(!_.isEqual(new f,new e),"Objects with different constructors and identical own properties are not equal");ok(!_.isEqual({value:1},new f),"Object instances and objects sharing equivalent properties are not equal");ok(!_.isEqual({value:2},new e),"The prototype chain of objects should not be examined");(d=[]).push(d);(c=[]).push(c);ok(_.isEqual(d,c),"Arrays containing circular references are equal");d.push(new String("Larry"));c.push(new String("Larry"));ok(_.isEqual(d,c),"Arrays containing circular references and equivalent properties are equal");d.push("Shemp");c.push("Curly");ok(!_.isEqual(d,c),"Arrays containing circular references and different properties are not equal");d=["everything is checked but","this","is not"];d[1]=d;c=["everything is checked but",["this","array"],"is not"];ok(!_.isEqual(d,c),"Comparison of circular references with non-circular references are not equal");d={abc:null};c={abc:null};d.abc=d;c.abc=c;ok(_.isEqual(d,c),"Objects containing circular references are equal");d.def=75;c.def=75;ok(_.isEqual(d,c),"Objects containing circular references and equivalent properties are equal");d.def=new Number(75);c.def=new Number(63);ok(!_.isEqual(d,c),"Objects containing circular references and different properties are not equal");d={everything:"is checked",but:"this",is:"not"};d.but=d;c={everything:"is checked",but:{that:"object"},is:"not"};ok(!_.isEqual(d,c),"Comparison of circular references with non-circular object references are not equal");d=[{abc:null}];c=[{abc:null}];(d[0].abc=d).push(d);(c[0].abc=c).push(c);ok(_.isEqual(d,c),"Cyclic structures are equal");d[0].def="Larry";c[0].def="Larry";ok(_.isEqual(d,c),"Cyclic structures containing equivalent properties are equal");d[0].def=new String("Larry");c[0].def=new String("Curly");ok(!_.isEqual(d,c),"Cyclic structures containing different properties are not equal");d={foo:{b:{foo:{c:{foo:null}}}}};c={foo:{b:{foo:{c:{foo:null}}}}};d.foo.b.foo.c.foo=d;c.foo.b.foo.c.foo=c;ok(_.isEqual(d,c),"Cyclic structures with nested and identically-named properties are equal");ok(!_.isEqual(_({x:1,y:undefined}).chain(),_({x:1,z:2}).chain()),"Chained objects containing different values are not equal");equal(_({x:1,y:2}).chain().isEqual(_({x:1,y:2}).chain()).value(),true,"`isEqual` can be chained");var h={isEqual:function(i){return i.isEqual==this.isEqual},unique:{}};var g={isEqual:h.isEqual,unique:{}};ok(_.isEqual(h,g),"Both objects implement identical `isEqual` methods");ok(_.isEqual(g,h),"Commutative equality is implemented for objects with custom `isEqual` methods");ok(!_.isEqual(h,{}),"Objects that do not implement equivalent `isEqual` methods are not equal");ok(!_.isEqual({},h),"Commutative equality is implemented for objects with different `isEqual` methods");ok(_.isEqual({},iObject))});test("isEmpty",function(){ok(!_([1]).isEmpty(),"[1] is not empty");ok(_.isEmpty([]),"[] is empty");ok(!_.isEmpty({one:1}),"{one : 1} is not empty");ok(_.isEmpty({}),"{} is empty");ok(_.isEmpty(new RegExp("")),"objects with prototype properties are empty");ok(_.isEmpty(null),"null is empty");ok(_.isEmpty(),"undefined is empty");ok(_.isEmpty(""),"the empty string is empty");ok(!_.isEmpty("moe"),"but other strings are not");var c={one:1};delete c.one;ok(_.isEmpty(c),"deleting all the keys from an object empties it")});var a=document.createElement("iframe");jQuery(a).appendTo(document.body);var b=a.contentDocument||a.contentWindow.document;b.write("<script>      parent.iElement   = document.createElement('div');      parent.iArguments = (function(){ return arguments; })(1, 2, 3);      parent.iArray     = [1, 2, 3];      parent.iString    = new String('hello');      parent.iNumber    = new Number(100);      parent.iFunction  = (function(){});      parent.iDate      = new Date();      parent.iRegExp    = /hi/;      parent.iNaN       = NaN;      parent.iNull      = null;      parent.iBoolean   = new Boolean(false);      parent.iUndefined = undefined;      parent.iObject     = {};    <\/script>");b.close();test("isElement",function(){ok(!_.isElement("div"),"strings are not dom elements");ok(_.isElement($("html")[0]),"the html tag is a DOM element");ok(_.isElement(iElement),"even from another frame")});test("isArguments",function(){var c=(function(){return arguments})(1,2,3);ok(!_.isArguments("string"),"a string is not an arguments object");ok(!_.isArguments(_.isArguments),"a function is not an arguments object");ok(_.isArguments(c),"but the arguments object is an arguments object");ok(!_.isArguments(_.toArray(c)),"but not when it's converted into an array");ok(!_.isArguments([1,2,3]),"and not vanilla arrays.");ok(_.isArguments(iArguments),"even from another frame")});test("isObject",function(){ok(_.isObject(arguments),"the arguments object is object");ok(_.isObject([1,2,3]),"and arrays");ok(_.isObject($("html")[0]),"and DOM element");ok(_.isObject(iElement),"even from another frame");ok(_.isObject(function(){}),"and functions");ok(_.isObject(iFunction),"even from another frame");ok(!_.isObject(null),"but not null");ok(!_.isObject(undefined),"and not undefined");ok(!_.isObject("string"),"and not string");ok(!_.isObject(12),"and not number");ok(!_.isObject(true),"and not boolean");ok(_.isObject(new String("string")),"but new String()")});test("isArray",function(){ok(!_.isArray(arguments),"the arguments object is not an array");ok(_.isArray([1,2,3]),"but arrays are");ok(_.isArray(iArray),"even from another frame")});test("isString",function(){ok(!_.isString(document.body),"the document body is not a string");ok(_.isString([1,2,3].join(", ")),"but strings are");ok(_.isString(iString),"even from another frame")});test("isNumber",function(){ok(!_.isNumber("string"),"a string is not a number");ok(!_.isNumber(arguments),"the arguments object is not a number");ok(!_.isNumber(undefined),"undefined is not a number");ok(_.isNumber(3*4-7/10),"but numbers are");ok(_.isNumber(NaN),"NaN *is* a number");ok(_.isNumber(Infinity),"Infinity is a number");ok(_.isNumber(iNumber),"even from another frame");ok(!_.isNumber("1"),"numeric strings are not numbers")});test("isBoolean",function(){ok(!_.isBoolean(2),"a number is not a boolean");ok(!_.isBoolean("string"),"a string is not a boolean");ok(!_.isBoolean("false"),'the string "false" is not a boolean');ok(!_.isBoolean("true"),'the string "true" is not a boolean');ok(!_.isBoolean(arguments),"the arguments object is not a boolean");ok(!_.isBoolean(undefined),"undefined is not a boolean");ok(!_.isBoolean(NaN),"NaN is not a boolean");ok(!_.isBoolean(null),"null is not a boolean");ok(_.isBoolean(true),"but true is");ok(_.isBoolean(false),"and so is false");ok(_.isBoolean(iBoolean),"even from another frame")});test("isFunction",function(){ok(!_.isFunction([1,2,3]),"arrays are not functions");ok(!_.isFunction("moe"),"strings are not functions");ok(_.isFunction(_.isFunction),"but functions are");ok(_.isFunction(iFunction),"even from another frame")});test("isDate",function(){ok(!_.isDate(100),"numbers are not dates");ok(!_.isDate({}),"objects are not dates");ok(_.isDate(new Date()),"but dates are");ok(_.isDate(iDate),"even from another frame")});test("isRegExp",function(){ok(!_.isRegExp(_.identity),"functions are not RegExps");ok(_.isRegExp(/identity/),"but RegExps are");ok(_.isRegExp(iRegExp),"even from another frame")});test("isFinite",function(){ok(!_.isFinite(undefined),"undefined is not Finite");ok(!_.isFinite(null),"null is not Finite");ok(!_.isFinite(NaN),"NaN is not Finite");ok(!_.isFinite(Infinity),"Infinity is not Finite");ok(!_.isFinite(-Infinity),"-Infinity is not Finite");ok(!_.isFinite("12"),"Strings are not numbers");var c=new Number(5);ok(_.isFinite(c),"Number instances can be finite");ok(_.isFinite(0),"0 is Finite");ok(_.isFinite(123),"Ints are Finite");ok(_.isFinite(-12.44),"Floats are Finite")});test("isNaN",function(){ok(!_.isNaN(undefined),"undefined is not NaN");ok(!_.isNaN(null),"null is not NaN");ok(!_.isNaN(0),"0 is not NaN");ok(_.isNaN(NaN),"but NaN is");ok(_.isNaN(iNaN),"even from another frame");ok(_.isNaN(new Number(NaN)),"wrapped NaN is still NaN")});test("isNull",function(){ok(!_.isNull(undefined),"undefined is not null");ok(!_.isNull(NaN),"NaN is not null");ok(_.isNull(null),"but null is");ok(_.isNull(iNull),"even from another frame")});test("isUndefined",function(){ok(!_.isUndefined(1),"numbers are defined");ok(!_.isUndefined(null),"null is defined");ok(!_.isUndefined(false),"false is defined");ok(!_.isUndefined(NaN),"NaN is defined");ok(_.isUndefined(),"nothing is undefined");ok(_.isUndefined(undefined),"undefined is undefined");ok(_.isUndefined(iUndefined),"even from another frame")});if(window.ActiveXObject){test("IE host objects",function(){var c=new ActiveXObject("Msxml2.DOMDocument.3.0");ok(!_.isNumber(c));ok(!_.isBoolean(c));ok(!_.isNaN(c));ok(!_.isFunction(c));ok(!_.isNull(c));ok(!_.isUndefined(c))})}test("tap",function(){var c=null;var e=function(f){c=f};var d=_.tap(1,e);equal(c,1,"passes tapped object to interceptor");equal(d,1,"returns tapped object");d=_([1,2,3]).chain().map(function(f){return f*2}).max().tap(e).value();ok(d==6&&c==6,"can use tapped objects in a chain")})});