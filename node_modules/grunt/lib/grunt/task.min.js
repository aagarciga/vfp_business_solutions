"use strict";var grunt=require("../grunt");var path=require("path");var parent=grunt.util.task.create();var task=module.exports=Object.create(parent);var registry={tasks:[],untasks:[],meta:{}};var lastInfo;var loadTaskDepth=0;var errorcount;task.registerTask=function(b){registry.tasks.push(b);parent.registerTask.apply(task,arguments);var a=task._tasks[b];a.meta=grunt.util._.clone(registry.meta);var c=a.fn;a.fn=function(d){var f=a.name;errorcount=grunt.fail.errorcount;Object.defineProperty(this,"errorCount",{enumerable:true,get:function(){return grunt.fail.errorcount-errorcount}});this.requires=task.requires.bind(task);this.requiresConfig=grunt.config.requires;this.options=function(){var h=[{}].concat(grunt.util.toArray(arguments)).concat([grunt.config([f,"options"])]);var g=grunt.util._.extend.apply(null,h);grunt.verbose.writeflags(g,"Options");return g};var e=c.alias||(a.multi&&(!d||d==="*"))?"verbose":"log";grunt[e].header('Running "'+this.nameArgs+'"'+(this.name!==this.nameArgs?" ("+this.name+")":"")+" task");grunt[e].debug("Task source: "+a.meta.filepath);return c.apply(this,arguments)};return task};function isValidMultiTaskTarget(a){return !/^_|^options$/.test(a)}task.normalizeMultiTaskFiles=function(b,d){var e,c;var a=[];if(grunt.util.kindOf(b)==="object"){if("src" in b||"dest" in b){c={};for(e in b){if(e!=="options"){c[e]=b[e]}}a.push(c)}else{if(grunt.util.kindOf(b.files)==="object"){for(e in b.files){a.push({src:b.files[e],dest:grunt.config.process(e)})}}else{if(Array.isArray(b.files)){grunt.util._.flatten(b.files).forEach(function(f){var g;if("src" in f||"dest" in f){a.push(f)}else{for(g in f){a.push({src:f[g],dest:grunt.config.process(g)})}}})}}}}else{a.push({src:b,dest:grunt.config.process(d)})}if(a.length===0){grunt.verbose.writeln("File: "+"[no files]".yellow);return[]}a=grunt.util._(a).chain().forEach(function(f){if(!("src" in f)||!f.src){return}if(Array.isArray(f.src)){f.src=grunt.util._.flatten(f.src)}else{f.src=[f.src]}}).map(function(i){var h=grunt.util._.extend({},i);delete h.src;delete h.dest;if(i.expand){return grunt.file.expandMapping(i.src,i.dest,h).map(function(k){var j=grunt.util._.extend({},i);j.orig=grunt.util._.extend({},i);j.src=grunt.config.process(k.src);j.dest=grunt.config.process(k.dest);["expand","cwd","flatten","rename","ext"].forEach(function(l){delete j[l]});return j})}var f=grunt.util._.extend({},i);f.orig=grunt.util._.extend({},i);if("src" in f){Object.defineProperty(f,"src",{enumerable:true,get:function g(){var j;if(!("result" in g)){j=i.src;j=Array.isArray(j)?grunt.util._.flatten(j):[j];g.result=grunt.file.expand(h,j)}return g.result}})}if("dest" in f){f.dest=i.dest}return f}).flatten().value();if(grunt.option("verbose")){a.forEach(function(g){var f=[];if("src" in g){f.push(g.src.length>0?grunt.log.wordlist(g.src):"[no src]".yellow)}if("dest" in g){f.push("-> "+(g.dest?String(g.dest).cyan:"[no dest]".yellow))}if(f.length>0){grunt.verbose.writeln("Files: "+f.join(" "))}})}return a};task.registerMultiTask=function(b,d,c){if(c==null){c=d;d="Custom multi task."}var a;task.registerTask(b,d,function(f){var e=a.name;this.args=grunt.util.toArray(arguments).slice(1);if(!f||f==="*"){return task.runAllTargets(e,this.args)}else{if(!isValidMultiTaskTarget(f)){throw new Error('Invalid target "'+f+'" specified.')}}this.requiresConfig([e,f]);this.options=function(){var i=grunt.config([e,f]);var h=[{}].concat(grunt.util.toArray(arguments)).concat([grunt.config([e,"options"]),grunt.util.kindOf(i)==="object"?i.options:{}]);var g=grunt.util._.extend.apply(null,h);grunt.verbose.writeflags(g,"Options");return g};this.target=f;this.flags={};this.args.forEach(function(g){this.flags[g]=true},this);this.data=grunt.config([e,f]);this.files=task.normalizeMultiTaskFiles(this.data,f);Object.defineProperty(this,"filesSrc",{enumerable:true,get:function(){return grunt.util._(this.files).chain().pluck("src").flatten().uniq().value()}.bind(this)});return c.apply(this,this.args)});a=task._tasks[b];a.multi=true};task.registerInitTask=function(a,c,b){task.registerTask(a,c,b);task._tasks[a].init=true};task.renameTask=function(d,b){var a;try{a=parent.renameTask.apply(task,arguments);registry.untasks.push(d);registry.tasks.push(b);return a}catch(c){grunt.log.error(c.message)}};task.runAllTargets=function(c,b){var a=Object.keys(grunt.config.getRaw(c)||{});if(a.length===0){grunt.log.error('No "'+c+'" targets found.');return false}a.filter(isValidMultiTaskTarget).forEach(function(d){task.run([c,d].concat(b||[]).join(":"))})};var loadTaskStack=[];function loadTask(c){loadTaskStack.push(registry);registry={tasks:[],untasks:[],meta:{info:lastInfo,filepath:c}};var a=path.basename(c);var f='Loading "'+a+'" tasks...';var g=0;var b;try{b=require(path.resolve(c));if(typeof b==="function"){b.call(grunt,grunt)}grunt.verbose.write(f).ok();["un",""].forEach(function(h){var e=grunt.util._.chain(registry[h+"tasks"]).uniq().sort().value();if(e.length>0){g++;grunt.verbose.writeln((h?"- ":"+ ")+grunt.log.wordlist(e))}});if(g===0){grunt.verbose.warn("No tasks were registered or unregistered.")}}catch(d){grunt.log.write(f).error().verbose.error(d.stack).or.error(d)}registry=loadTaskStack.pop()||{}}function loadTasksMessage(a){if(loadTaskDepth===0){lastInfo=a}grunt.verbose.subhead("Registering "+a+" tasks.")}function loadTasks(c){try{var a=grunt.file.glob.sync("*.{js,coffee}",{cwd:c,maxDepth:1});a.forEach(function(d){loadTask(path.join(c,d))})}catch(b){grunt.log.verbose.error(b.stack).or.error(b)}}task.loadTasks=function(a){loadTasksMessage('"'+a+'"');if(grunt.file.exists(a)){loadTasks(a)}else{grunt.log.error('Tasks directory "'+a+'" not found.')}};task.loadNpmTasks=function(c){loadTasksMessage('"'+c+'" local Npm module');var a=path.resolve("node_modules");var d=path.join(a,c,"package.json");var b=grunt.file.exists(d)?grunt.file.readJSON(d):{keywords:[]};if(b.keywords&&b.keywords.indexOf("gruntcollection")!==-1){loadTaskDepth++;Object.keys(b.dependencies).forEach(function(g){var f=grunt.file.findup("node_modules/"+g,{cwd:path.resolve("node_modules",c),nocase:true});if(f){task.loadNpmTasks(path.relative(a,f))}});loadTaskDepth--;return}var e=path.join(a,c,"tasks");if(grunt.file.exists(e)){loadTasks(e)}else{grunt.log.error('Local Npm module "'+c+'" not found. Is it installed?')}};task.init=function(e,a){if(!a){a={}}var c=e.length>0&&e.every(function(f){var g=task._taskPlusArgs(f).task;return g&&g.init});var b=c?null:grunt.option("gruntfile")||grunt.file.findup("Gruntfile.{js,coffee}",{nocase:true});var d='Reading "'+(b?path.basename(b):"???")+'" Gruntfile...';if(b&&grunt.file.exists(b)){grunt.verbose.writeln().write(d).ok();process.chdir(grunt.option("base")||path.dirname(b));loadTasksMessage("Gruntfile");loadTask(b)}else{if(a.help||c){}else{if(grunt.option("gruntfile")){grunt.log.writeln().write(d).error();grunt.fatal('Unable to find "'+b+'" Gruntfile.',grunt.fail.code.MISSING_GRUNTFILE)}else{if(!grunt.option("help")){grunt.verbose.writeln().write(d).error();grunt.log.writelns("A valid Gruntfile could not be found. Please see the getting started guide for more information on how to configure grunt: http://gruntjs.com/getting-started");grunt.fatal("Unable to find Gruntfile.",grunt.fail.code.MISSING_GRUNTFILE)}}}}(grunt.option("npm")||[]).forEach(task.loadNpmTasks);(grunt.option("tasks")||[]).forEach(task.loadTasks)};