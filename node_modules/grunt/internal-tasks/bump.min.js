"use strict";var semver=require("semver");var shell=require("shelljs");module.exports=function(e){e.registerTask("bump","Bump the version property of a JSON file.",function(){var h=["major","minor","patch","prerelease"];var k=[];this.args.forEach(function(m){var l=[];h.forEach(function(n){if(n.indexOf(m)===0){l.push(n)}});if(l.length===0){e.log.error('Error: mode "'+m+'" does not match any known modes.')}else{if(l.length>1){e.log.error('Error: mode "'+m+'" is ambiguous (possibly: '+l.join(", ")+").")}else{k.push(l[0])}}});if(this.errorCount===0&&k.length===0){e.log.error("Error: no modes specified.")}if(this.errorCount>0){e.log.error("Valid modes are: "+h.join(", ")+".");throw new Error("Use valid modes (or unambiguous mode abbreviations).")}var g=this.options({filepaths:["package.json"],syncVersions:false,commit:true,commitMessage:"Bumping version to {%= version %}.",tag:true,tagName:"v{%= version %}",tagMessage:"Version {%= version %}",tagPrerelease:false,});var j=Array.isArray(g.filepaths)?g.filepaths:[g.filepaths];var f={};j.forEach(function(m){var p=e.file.readJSON(m);var n=p.version;var l=Object.keys(f)[0];if(g.syncVersions&&l){p.version=l}k.forEach(function(q){var r=p.version;var o=semver.parse(p.version);o.inc(q);p.version=String(o);if(/-/.test(r)&&q==="patch"){p.version=p.version.replace(/\d+$/,function(s){return s-1})}if(!/-/.test(r)&&q==="prerelease"){o.inc("patch");o.inc("prerelease");p.version=String(o)}});if(f[n]){f[n].filepaths.push(m)}else{f[n]={version:p.version,filepaths:[m]}}e.log.write("Bumping version in "+m+" from "+n+" to "+p.version+"...");e.file.write(m,JSON.stringify(p,null,2));e.log.ok()});if(g.commit){Object.keys(f).forEach(function(l){var m=f[l];d(m.filepaths,b(g.commitMessage,{version:m.version,origVersion:l}))})}var i=f[Object.keys(f)[0]].version;if(g.tag){if(g.tagPrerelease||k.indexOf("prerelease")===-1){a(b(g.tagName,{version:i}),b(g.tagMessage,{version:i}))}else{e.log.writeln("Not tagging (prerelease version).")}}if(this.errorCount>0){e.warn("There were errors.")}});e.template.addDelimiters("bump","{%","%}");function b(f,g){return e.template.process(f,{delimiters:"bump",data:g,})}function d(g,f){e.log.writeln("Committing "+g.join(", ")+" with message: "+f);c("git commit -m '"+f+"' '"+g.join("' '")+"'")}function a(f,g){e.log.writeln("Tagging "+f+" with message: "+g);c("git tag '"+f+"' -m '"+g+"'")}function c(g){if(e.option("no-write")){e.verbose.writeln("Not actually running: "+g)}else{e.verbose.writeln("Running: "+g);var f=shell.exec(g,{silent:true});if(f.code!==0){e.log.error("Error ("+f.code+") "+f.output)}}}};